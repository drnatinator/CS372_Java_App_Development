/*
FEEDBACK:

Read from the file correctly: 20/20%
Implement class hierarchy correctly: 20/20%
Populate appropriate data structures with shape data: 15/15%
Show list of shapes correctly: 15/15%
Show specific shape properties correctly: 15/15%
Well-structured, well-commented code: 13/15%


Comments:
  You forgot to upload the image files in the Resources folder.
  Don't need to define toString in Shape. It's defined in Object.
  I would like to see the image resource stored as a static member for each shape kind.
*/

import java.awt.EventQueue;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.awt.Dimension;
import javax.swing.JFrame;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JTextArea;


public class outputWindow {

	private JFrame frame;
	private JPanel panel_1 = new JPanel();		//J components that I need to be globally accessible
	private JLabel images = new JLabel();
	private JTextArea txtrOut = new JTextArea();
	private static ArrayList<JButton> shapeButtons = new ArrayList<JButton>();//arraylist of buttons, since we don't know how many shapes will be added ahead of time
	private static ArrayList<Shape> shapes = new ArrayList<Shape>();//arraylist of Shape objects


	public static void main(String[] args) {
		String curdir = System.getProperty("user.dir");//finds current directory
		//System.out.printf("%s\n", curdir);//for debugging. prints curdir to console
		parseCSV(curdir);//calls the function which parses a CSV file into usable data
		
		
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					outputWindow window = new outputWindow();//makes the window...generated by Eclipse's WindowBuilder
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	private static void parseCSV(String curdir) {//parses a CSV file into the data we need
		File cd = new File(curdir);//locates current directory
		File[] files = cd.listFiles();//array of all the files in curdir
		for (File f: files) {
			if (f.getName().endsWith(".csv")) {//finds which files are CSVs
				try (FileInputStream is = new FileInputStream(f)){
					InputStreamReader ir = new InputStreamReader(is);		//opens CSVs
					BufferedReader rdr = new BufferedReader(ir);
					String line = rdr.readLine();//reads in the first line in the CSV
					
					while (line != null) {//terminates the loop when we reach the end of the file
						line = line.replaceAll(" ","");//get rid of white space
						//System.out.printf(line);//for debugging
						String[] parts = line.split(",");//split the line into an array of strings, each place there's a comma
						ArrayList parsedParts = new ArrayList();//makes an arraylist of parts, of no specified type
						for (String p: parts) {
							
							//parsedParts.add(new String("Hello"));
							if (p.length() > 0 && (p.contains("\""))) {//if a part has a double quote, it's a string
								p=p.replaceAll("\"","");//now that we know it's a string, get rid of the quotes
								//System.out.printf(p);//for debugging
								parsedParts.add(p);//adds our new, quote-less string to parsedParts
								}
							else {
								//System.out.printf("p: %s\n",p);//for debugging. Lets us know we're dealing with a number
								parsedParts.add(Double.parseDouble(p));//in this case, if it isn't a string, it's a number. I treat them as doubles to make it easier to generate areas and perimeters with decimals
							}}
						//System.out.printf("here!");//for debugging
						//System.out.printf("%s, %s, %s, %s\n",parsedParts.get(0), parsedParts.get(1), parsedParts.get(2), parsedParts.get(3));//for debugging
						if (parsedParts.get(0).toString().equals("circle")) {//if the first part is the string, "circle", then we generate a new Circle with the proper values and add it to shapes
							//System.out.printf("here ");
							shapes.add(new Circle((double)parsedParts.get(1), (double)parsedParts.get(2),(String)parsedParts.get(3)));
						}
						else if (parsedParts.get(0).toString().equals("square")) {//if the first part is the string, "square", then we generate a new Square with the proper values and add it to shapes
							//System.out.printf("here%s\n",parsedParts.get(2));//for debugging
							shapes.add(new Square((double)parsedParts.get(1), (double)parsedParts.get(2), (String)parsedParts.get(3)));}
						else if (parsedParts.get(0).toString().equals("triangle"))//if the first part is the string, "triangle", then we generate a new Triangle with the proper values and add it to shapes
							shapes.add(new Triangle((double) parsedParts.get(1), (double)parsedParts.get(2), (double)parsedParts.get(3),(double)parsedParts.get(4),(String)parsedParts.get(5)));
						else if (parsedParts.get(0).toString().equals("rectangle"))//if the first part is the string, "rectangle", then we generate a new Rectangle with the proper values and add it to shapes
							shapes.add(new Rectangle((double)parsedParts.get(1),(double)parsedParts.get(2),(double)parsedParts.get(3),(String)parsedParts.get(4)));
						line = rdr.readLine();		//reads next line for the next iteration through the loop. Terminates loop when this gets a null
						}
					}
				catch (Exception ex) {System.out.printf("Failed for %s\n", f.getName());}//if we fail to open a file
				
				
				
				}
			}
		//System.out.printf(shapes.get(2).getDetString());//for debugging
		}

	public outputWindow() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 633, 300);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(new BorderLayout(0, 0));
		
		JScrollPane scrollPane = new JScrollPane();//scrollpane, in case there are too many shapes for their buttons to all fit on the screen
		scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		frame.getContentPane().add(scrollPane, BorderLayout.WEST);
		
		JPanel panel = new JPanel();
		scrollPane.setViewportView(panel);//panel in the scrollpane for the buttons to go in
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		
		for (int i=0; i<shapes.size();i++) {//iterates through each shape in shapes
			String msg = shapes.get(i).toString();//to be printed on the button. Returns the shape type and its ID
			JButton btn = new JButton(msg);//places the above on a button
			btn.setMaximumSize(new Dimension(130, 40));//sets dimensions for the button
			btn.setMinimumSize(new Dimension(10,20));
			shapeButtons.add(btn);//adds the button to an arraylist of buttons, to be added to the scrollpane [below]
		}
		
		for (int i=0; i<shapeButtons.size();i++) {//iterate through the arraylist of buttons
			panel.add(shapeButtons.get(i));//add the button to the panel
			shapeButtons.get(i).addActionListener(new ActionListener() {//listen for a click on the button
				public void actionPerformed(ActionEvent e) {//what to do if a button is pressed
					
					
					
					if (panel_1.getComponentCount()>0)//if there's already an icon on the screen, we need to get rid of it
						panel_1.remove(images);
					panel_1.repaint();
					String msg = shapes.get(shapeButtons.indexOf(e.getSource())).getDetString();//gets the string containing details about the shape from the object [how's that for a string of [this.that]'s?
					//System.out.printf("button press...\n%s\n", msg);//for debugging
					txtrOut.setText(msg);//displays the string of details to the screen, on the EAST panel
					
					//I know copy/pasting code is bad, but it wouldn't really have saved much to split these if-statement out into functions, anyway. I'd still need to customize like half of the lines four times.
					if (shapes.get(shapeButtons.indexOf(e.getSource())).getDetString().contains("Circle")) {//if the button pressed was for a circle
						//System.out.println("here");//for debugging
						Toolkit toolkit = Toolkit.getDefaultToolkit();
						URL u = getClass().getResource("/Resources/Circle.png");//grabs a circle image [custom made by me]
						Image img = toolkit.getImage(u);
						img = img.getScaledInstance(150, 150, Image.SCALE_SMOOTH);//rescale the circle
						ImageIcon imgicon = new ImageIcon(img);//turn the newly scaled image into an icon
						images.setIcon(imgicon);//set the label images to carry the circle's icon
						panel_1.add(images);//add this icon to the panel
						panel_1.validate();
						panel_1.repaint();//paint the new icon to the panel!
					}
					if (shapes.get(shapeButtons.indexOf(e.getSource())).getDetString().contains("Square")) {//if the button pressed was for a square
						System.out.println("here");
						Toolkit toolkit = Toolkit.getDefaultToolkit();
						URL u = getClass().getResource("/Resources/Square.png");//grabs a square image [custom made by me]
						Image img = toolkit.getImage(u);
						img = img.getScaledInstance(150, 150, Image.SCALE_SMOOTH);//rescale the square
						ImageIcon imgicon = new ImageIcon(img);//turn the newly scaled image into an icon
						images.setIcon(imgicon);//set the label images to carry the square's icon
						panel_1.add(images);//add this icon to the panel
						panel_1.validate();
						panel_1.repaint();//paint the new icon to the panel!
					}
					if (shapes.get(shapeButtons.indexOf(e.getSource())).getDetString().contains("Rectangle")) {//if the button pressed was for a rectangle
						System.out.println("here");
						Toolkit toolkit = Toolkit.getDefaultToolkit();
						URL u = getClass().getResource("/Resources/Rectangle.png");//grabs a rectangle image [custom made by me]
						Image img = toolkit.getImage(u);
						img = img.getScaledInstance(200, 124, Image.SCALE_SMOOTH);//rescale the rectangle
						ImageIcon imgicon = new ImageIcon(img);//turn the newly scaled image into an icon
						images.setIcon(imgicon);//set the label images to carry the rectangle's icon
						panel_1.add(images);//add this icon to the panel
						panel_1.validate();
						panel_1.repaint();//paint the new icon to the panel!
					}
					if (shapes.get(shapeButtons.indexOf(e.getSource())).getDetString().contains("Triangle")) {//if the button pressed was for a triangle
						System.out.println("here");
						Toolkit toolkit = Toolkit.getDefaultToolkit();
						URL u = getClass().getResource("/Resources/Triangle.png");//grabs a triangle image [custom made by me]
						Image img = toolkit.getImage(u);
						img = img.getScaledInstance(150, 130, Image.SCALE_SMOOTH);//rescale the triangle
						ImageIcon imgicon = new ImageIcon(img);//turn the newly scaled image into an icon
						images.setIcon(imgicon);//set the label images to carry the triangle's icon
						panel_1.add(images);//add this icon to the panel
						panel_1.validate();
						panel_1.repaint();//paint the new icon to the panel!
					}
					
				}
			});
		}
		
		//JPanel panel_1 = new JPanel();
		frame.getContentPane().add(panel_1, BorderLayout.CENTER);//initialize central panel which will contain icons[above]
		
		JPanel panel_2 = new JPanel();
		frame.getContentPane().add(panel_2, BorderLayout.EAST);//initialize east panel which will contain details about a given shape [above]
		
		
		//txtrOut.setText("test");//for debugging
		panel_2.add(txtrOut);//contains the detail string about a given shape
	}
}
